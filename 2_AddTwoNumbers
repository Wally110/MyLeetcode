// https://leetcode.com/problems/add-two-numbers/description/
// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each 
// of their nodes contain a single digit. Add the two numbers and return it as a linked list.
// You may assume the two numbers do not contain any leading zero, except the number 0 itself.

C++:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *ls = new ListNode(-1) , *p1, *p2, *p = ls;//一定要有头结点，这样不容易错
        //if(l1->val==0&&!l1->next)
        //    return l2;
        //if(l2->val==0&&!l2->next)
        //    return l1;
        int t=0, u=0, flag = 0;
        for(p1 = l1,p2 = l2;(p1!=NULL)&&(p2!=NULL);p1=p1->next,p2=p2->next){
            t = p1->val + p2->val + u;
            if(t>9){
                u = 1;
                t = t -10;
            } else{
                u = 0;
            }
            p->next = new ListNode(t);
            if(flag==0){
                ls = p ;
                flag = 1;
            }                
            p = p -> next; 
        } 
        while(p1!=NULL){
            t=u+p1->val;
            if(t>9){
                u = 1;
                t = t -10;
            } else{
                u = 0;
            }
            p->next = new ListNode(t);
            p = p -> next;
            p1 = p1 -> next;
        }
        while(p2!=NULL){
            t=u+p2->val;
            if(t>9){
                u = 1;
                t = t -10;
            } else{
                u = 0;
            }
            p->next = new ListNode(t);
            p = p -> next;
            p2 = p2 -> next;
        }
        if(u==1){
            p->next = new ListNode(u);
            p = p -> next; 
        }
        return ls->next; //不返回头结点  
    }
    
};

Java:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ls = new ListNode(-1);
        ListNode p1 = l1, p2 = l2, p = ls;
        int t, carry=0;
        for(;p1!=null&&p2!=null;p1=p1.next,p2=p2.next){
            t=p1.val+p2.val+carry;
            p.next = new ListNode(t%10);
            p=p.next;
            carry = t/10;
        }
        for(ListNode p3 =(p1==null? p2 : p1);p3!=null;p3=p3.next){
            t=p3.val+carry;
            p.next = new ListNode(t%10);
            p=p.next;
            carry = t/10;
        }
        if(carry!=0){
            p.next = new ListNode(carry);
            p=p.next;
        }
        return ls.next;
    }
}
