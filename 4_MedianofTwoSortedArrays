// https://leetcode.com/problems/median-of-two-sorted-arrays/description/
// There are two sorted arrays nums1 and nums2 of size m and n respectively.
// Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

C++:
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int>::iterator it1 = nums1.begin();
        vector<int>::iterator it2 = nums2.begin();
        int output[2]={-1,-1},index[2]={-1,-1};
        int len = nums1.size()+nums2.size();
        int i=0;
        if(len%2==0){//长度为偶数
                index[0] = len/2;
                index[1] = index[0]+1;
        }else if(len%2==1){       //长度为奇数
                index[0] = (len+1)/2;
        }
        while(it1 != nums1.end()&&it2 != nums2.end()){
            i++;
            if(*it1<*it2){
                if(i==index[0]){
                    output[0]=*it1;
                    if(len%2==1) break;
                }else if(i==index[1]){
                    output[1]=*it1;
                }
                it1++;
            }else if(*it1>=*it2){
                if(i==index[0]){
                    output[0]=*it2;
                    if(len%2==1) break;
                }else if(i==index[1]){
                    output[1]=*it2;
                }
                it2++;
            }           
        }        
        while(it1 != nums1.end()){
            i++;
            if(i==index[0]){
                output[0]=*it1;
                if(index[1]==-1) break;      
            }else if(i==index[1]){
                output[1]=*it1;
            }
            it1++;
        }
        
        while(it2 != nums2.end()){
            i++;
            if(i==index[0]){
                output[0]=*it2;
                if(index[1]==-1)  break;         
            }else if(i==index[1]){
                output[1]=*it2;
            }
            it2++;
        }
               
        return (len%2==1 ? output[0] : (output[0]+output[1])/2.0 );
    }
};

Java:
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int it1 = 0;
        int it2 = 0;
        int[] output=new int[2], index=new int[2];
        int len = nums1.length+nums2.length;
        int i=0;
        if(len%2==0){//长度为偶数
                index[0] = len/2;
                index[1] = index[0]+1;
        }else if(len%2==1){       //长度为奇数
                index[0] = (len+1)/2;
        }
        while(it1 != nums1.length&&it2 != nums2.length){
            i++;
            if(nums1[it1]<nums2[it2]){
                if(i==index[0]){
                    output[0]=nums1[it1];
                    if(len%2==1) break;
                }else if(i==index[1]){
                    output[1]=nums1[it1];
                }
                it1++;
            }else if(nums1[it1]>=nums2[it2]){
                if(i==index[0]){
                    output[0]=nums2[it2];
                    if(len%2==1) break;
                }else if(i==index[1]){
                    output[1]=nums2[it2];
                }
                it2++;
            }           
        }        
        while(it1 != nums1.length){
            i++;
            if(i==index[0]){
                output[0]=nums1[it1];
                if(index[1]==-1) break;      
            }else if(i==index[1]){
                output[1]=nums1[it1];
            }
            it1++;
        }
        
        while(it2 != nums2.length){
            i++;
            if(i==index[0]){
                output[0]=nums2[it2];
                if(index[1]==-1)  break;         
            }else if(i==index[1]){
                output[1]=nums2[it2];
            }
            it2++;
        }
               
        return (len%2==1 ? output[0] : (output[0]+output[1])/2.0 );
    }
}
